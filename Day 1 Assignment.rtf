{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Cambria Math;}}
{\*\generator Riched20 6.3.9600}{\*\mmathPr\mmathFont1\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9                                \par
                                                                         Day 1  Assignment\par
Q.1\par
Methods of console function:\par
1.console.log() method \par
\par
console.log('abc');  \par
console.log(1); \par
\par
console.log(true); \par
\par
console.log(null); \par
console.log(undefined);  \par
\par
console.log([1, 2, 3, 4]); \par
\par
console.log(\{a:1, b:2, c:3\}); \par
\par
Output:\par
abc\par
1\par
true \par
null\par
undefined\par
Array(4) [1,2,3,4]\par
Object \{a: 1,b: 2,c: 3\}\par
>>\par
2.console error method\par
\par
console.error('This is a simple error');  \par
Output:\par
This is a simple error\par
\par
3.console warn method\par
console.warn('This is a warning.'); \par
Output:\par
This is a warning\par
\par
4.console clear\par
console.clear();\par
Output:\par
Screen cleared\par
\par
5.console.time() \par
6.console.timeEnd() method  \par
\par
console.time('abc'); \par
\par
 let fun =  function()\{ \par
\par
     console.log('fun is running'); \par
\par
 \} \par
\par
 let fun2 = function()\{ \par
\par
     console.log('fun2 is running..'); \par
\par
 \} \par
\par
 fun(); // calling fun(); \par
\par
 fun2(); // calling fun2(); \par
\par
console.timeEnd('abc'); \par
Output:\par
fun is running\par
fun2 is running..\par
abc:1ms\par
>>\par
7.console.table() method \par
\par
console.table(\{'a':1, 'b':2\}); \par
Output:\par
console.table()\par
(index)\par
a\par
b\par
>>\par
\par
8.console.count() method \par
\par
for(let i=0;i<5;i++)\{ \par
\par
    console.count(i); \par
\} \par
Output:\par
0: 1\par
1: 1\par
2: 1\par
3: 1\par
4: 1\par
 \par
9.console.group() \par
10. console.groupEnd() method \par
\par
console.group('simple'); \par
  console.warn('warning!'); \par
  console.error('error here'); \par
  console.log('vivi vini vici'); \par
console.groupEnd('simple'); \par
console.log('new section');\par
output:\par
simple\par
  warning!\par
  error here\par
  vivi vini vici\par
new section\par
\u-4441? \par
\par
11.Custom Console log example \par
  const spacing = '10px'; \par
  const styles =  \par
        `padding: $\{spacing\}; background-color: white; color: green; font-style:  \par
         italic; border: 1px solid black; font-size: 2em;`; \par
  console.log('%c I Love JavaScript', styles); \par
  output:\par
  I Love JavaScript\par
  \par
  Q.2 Difference between var, let, const\par
a) Var:\par
The JavaScript variables statement is used to declare a variable and, optionally, we can initialize the value of that variable.\par
\par
Example: var a =10;\par
\par
Variable declarations are processed before the execution of the code.\par
The scope of a JavaScript variable declared with var is its current execution context.\par
The scope of a JavaScript variable declared outside the function is global.\par
Consider the following code snippet.\par
\par
function nodeSimplified()\{\par
  var a =10;\par
  console.log(a);  // output 10\par
  if(true)\{\par
   var a=20;\par
   console.log(a); // output 20\par
  \}\par
  console.log(a);  // output 20\par
\}\par
In the above code, you can find, when the variable is updated inside the if loop, that the value of variable "a" updated 20 globally, hence outside the if loop the value persists. It is similar to the Global variable present in other languages. But, be sure to use this functionality with great care because there is the possibility of overriding an existing value.\par
\par
b)let:\par
The let statement declares a local variable in a block scope. It is similar to var, in that we can optionally initialize the variable.\par
\par
Example: let a =10;\par
\par
The let statement allows you to create a variable with the scope limited to the block on which it is used.\par
It is similar to the variable we declare in other languages like Java, .NET, etc.\par
Consider the following code snippet.\par
\par
function nodeSimplified()\{\par
  let a =10;\par
  console.log(a);  // output 10\par
  if(true)\{\par
   let a=20;\par
   console.log(a); // output 20\par
  \}\par
  console.log(a);  // output 10\par
\}\par
It is almost the same behavior we see in most language.\par
\par
function nodeSimplified()\{\par
  let a =10;\par
  let a =20; //throws syntax error\par
  console.log(a); \par
\}\par
Error Message: Uncaught SyntaxError: Identifier 'a' has already been declared.\par
\par
However, with var, it works fine.\par
\par
function nodeSimplified()\{ \par
  var a =10;   \par
  var a =20;   \par
  console.log(a);  //output 20 \par
\}\par
The scope will be well maintained with a let statement and when using an inner function the let statement makes your code clean and clear.\par
\par
I hope the above examples will help you better understand the var and let commands and if you have any queries please write me in the comment section.\par
\par
c) const\par
const statement values can be assigned once and they cannot be reassigned. The scope of const statement works similar to let statements.\par
\par
Example: const a =10;\par
\par
function nodeSimplified()\{\par
  const MY_VARIABLE =10;\par
  console.log(MY_VARIABLE);  //output 10 \par
\}\par
As per usual, naming standards dictated that we declare the const variable in capital letters. const a =10 will work the same way as the code given above. Naming standards should be followed to maintain the code for the long run.\par
  \par
Q.3 Data Types of JavaScript\par
1.The String Data Type\par
The string data type is used to represent textual data (i.e. sequences of characters). Strings are created using single or double quotes surrounding one or more characters, as shown below:\par
\par
Example\par
var a = 'Hi there!';  // using single quotes\par
var b = "Hi there!";  // using double quotes\par
You can include quotes inside the string as long as they don't match the enclosing quotes.\par
\par
Example\par
var a = "Let's have a cup of coffee."; // single quote inside double quotes\par
var b = 'He said "Hello" and left.';  // double quotes inside single quotes\par
var c = 'We\\'ll never give up.';     // escaping single quote with backslash\par
\par
2.The Number Data Type\par
The number data type is used to represent positive or negative numbers with or without decimal place, or numbers written using exponential notation e.g. 1.5e-4 (equivalent to 1.5x10-4).\par
\par
Example\par
var a = 25;         // integer\par
var b = 80.5;       // floating-point number\par
var c = 4.25e+6;    // exponential notation, same as 4.25e6 or 4250000\par
var d = 4.25e-6;    // exponential notation, same as 0.00000425\par
The Number data type also includes some special values which are: Infinity, -Infinity and NaN. Infinity represents the mathematical Infinity \f1\u8734?\f0 , which is greater than any number. Infinity is the result of dividing a nonzero number by 0, as demonstrated below:\par
\par
Example\par
alert(16 / 0);  // Output: Infinity\par
alert(-16 / 0); // Output: -Infinity\par
alert(16 / -0); // Output: -Infinity\par
While NaN represents a special Not-a-Number value. It is a result of an invalid or an undefined mathematical operation, like taking the square root of -1 or dividing 0 by 0, etc.\par
\par
Example\par
alert("Some text" / 2);       // Output: NaN\par
alert("Some text" / 2 + 10);  // Output: NaN\par
alert(Math.sqrt(-1));         // Output: NaN\par
\par
3.The Boolean Data Type\par
The Boolean data type can hold only two values: true or false. It is typically used to store values like yes (true) or no (false), on (true) or off (false), etc. as demonstrated below:\par
\par
Example\par
var isReading = true;   // yes, I'm reading\par
var isSleeping = false; // no, I'm not sleeping\par
Boolean values also come as a result of comparisons in a program. The following example compares two variables and shows the result in an alert dialog box:\par
\par
Example\par
var a = 2, b = 5, c = 10;\par
 \par
alert(b > a) // Output: true\par
alert(b > c) // Output: false\par
\par
4.The Boolean Data Type\par
The Boolean data type can hold only two values: true or false. It is typically used to store values like yes (true) or no (false), on (true) or off (false), etc. as demonstrated below:\par
\par
Example\par
var isReading = true;   // yes, I'm reading\par
var isSleeping = false; // no, I'm not sleeping\par
Boolean values also come as a result of comparisons in a program. The following example compares two variables and shows the result in an alert dialog box:\par
\par
Example\par
var a = 2, b = 5, c = 10;\par
 \par
alert(b > a) // Output: true\par
alert(b > c) // Output: false\par
\par
5.The Null Data Type\par
This is another special data type that can have only one value-the null value. A null value means that there is no value. It is not equivalent to an empty string ("") or 0, it is simply nothing.\par
\par
A variable can be explicitly emptied of its current contents by assigning it the null value.\par
\par
Example\par
var a = null;\par
alert(a); // Output: null\par
 \par
var b = "Hello World!"\par
alert(b); // Output: Hello World!\par
 \par
b = null;\par
alert(b) // Output: null\par
\par
6.The Object Data Type\par
The object is a complex data type that allows you to store collections of data.\par
\par
An object contains properties, defined as a key-value pair. A property key (name) is always a string, but the value can be any data type, like strings, numbers, booleans, or complex data types like arrays, function and other objects. You'll learn more about objects in upcoming chapters.\par
\par
The following example will show you the simplest way to create an object in JavaScript.\par
\par
Example\par
var emptyObject = \{\};\par
var person = \{"name": "Clark", "surname": "Kent", "age": "36"\};\par
 \par
// For better reading\par
var car = \{\par
    "modal": "BMW X3",\par
    "color": "white",\par
    "doors": 5\par
\}\par
You can omit the quotes around property name if the name is a valid JavaScript name. That means quotes are required around "first-name" but are optional around firstname. So the car object in the above example can also be written as:\par
\par
Example\par
var car = \{\par
    modal: "BMW X3",\par
    color: "white",\par
    doors: 5\par
\}\par
\par
7.The Array Data Type\par
An array is a type of object used for storing multiple values in single variable. Each value (also called an element) in an array has a numeric position, known as its index, and it may contain data of any data type-numbers, strings, booleans, functions, objects, and even other arrays. The array index starts from 0, so that the first array element is arr[0] not arr[1].\par
\par
The simplest way to create an array is by specifying the array elements as a comma-separated list enclosed by square brackets, as shown in the example below:\par
\par
Example\par
var colors = ["Red", "Yellow", "Green", "Orange"];\par
var cities = ["London", "Paris", "New York"];\par
 \par
alert(colors[0]);   // Output: Red\par
alert(cities[2]);   // Output: New York\par
\par
8.The Function Data Type\par
The function is callable object that executes a block of code. Since functions are objects, so it is possible to assign them to variables, as shown in the example below:\par
\par
Example\par
var greeting = function()\{ \par
    return "Hello World!"; \par
\}\par
 \par
// Check the type of greeting variable\par
alert(typeof greeting) // Output: function\par
alert(greeting());     // Output: Hello World!\par
In fact, functions can be used at any place any other value can be used. Functions can be stored in variables, objects, and arrays. Functions can be passed as arguments to other functions, and functions can be returned from functions. Consider the following function:\par
\par
Example\par
function createGreeting(name)\{\par
    return "Hello, " + name;\par
\}\par
function displayGreeting(greetingFunction, userName)\{\par
    return greetingFunction(userName);\par
\}\par
 \par
var result = displayGreeting(createGreeting, "Peter");\par
alert(result); // Output: Hello, Peter\lang9\par
}
 